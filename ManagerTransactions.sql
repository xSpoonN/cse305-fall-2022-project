SET XACT_ABORT ON -- Automatically abort the transaction on error.

-- Manager-Level Transactions --
-- Set the share price of a stock (for simulating market fluctuations in a stock's share price)
UPDATE Stock
SET PricePerShare = ? --Variable (INTEGER)
WHERE StockSymbol = ? --Variable (CHAR)

-------------------------------------------------------------------------------------------
-- Add, Edit and Delete information for an employee
BEGIN TRY BEGIN TRANSACTION;
UPDATE Employee
SET ? = ? --HourlyRate/StartDate, Variable (INTEGER)
WHERE Id = ? --Variable (INTEGER)
COMMIT TRANSACTION END TRY BEGIN CATCH BEGIN PRINT 'Already Exists' ROLLBACK END END CATCH

-------------------------------------------------------------------------------------------
-- Add an employee
BEGIN TRY BEGIN TRANSACTION;
INSERT INTO Employee (SSN, StartDate, HourlyRate)
VALUES (?, ?, ?) --Variable (INTEGER), Variable (DATETIME), Variable (INTEGER)
COMMIT TRANSACTION END TRY BEGIN CATCH BEGIN PRINT 'Already Exists' ROLLBACK END END CATCH


-------------------------------------------------------------------------------------------
-- Delete an employee
BEGIN TRY BEGIN TRANSACTION;
DELETE FROM Employee
WHERE Id = ? --Variable (INTEGER)
COMMIT TRANSACTION END TRY BEGIN CATCH BEGIN PRINT 'Already Exists' ROLLBACK END END CATCH

-------------------------------------------------------------------------------------------
-- Obtain a sales report for a particular month
SELECT SUM(Fee) as 'Total Revenue'
FROM Transactions
WHERE MONTH(DateTime) = ?  --Variable (INTEGER)
	AND YEAR(DateTime) = ? --Variable (INTEGER)
	
-------------------------------------------------------------------------------------------
-- Produce a comprehensive listing of all stocks
SELECT * FROM Stock

-------------------------------------------------------------------------------------------
-- Produce a list of orders by stock symbol
SELECT Orders.*
FROM Trade, Orders
WHERE StockId = ? --Variable (CHAR)
	AND Trade.OrderId = Orders.Id

-------------------------------------------------------------------------------------------
-- or by customer name
SELECT Orders.*
FROM Trade,Orders,Account,Client,Person
WHERE Person.LastName = ? --Variable (CHAR)
	AND Person.FirstName = ? --Variable (CHAR)
	AND Person.SSN = Client.Id AND Client.Id = Account.Client AND Account.Id = Trade.AccountId AND Trade.OrderId = Orders.Id

-------------------------------------------------------------------------------------------
-- Produce a summary listing of revenue generated by a particular stock,
SELECT SUM(Transactions.Fee)
FROM Trade,Transactions
WHERE Trade.StockId = ?  --Variable (CHAR)
	AND Trade.TransactionId = Transactions.Id

-------------------------------------------------------------------------------------------
--  stock type,
SELECT SUM(Transactions.Fee)
FROM Trade,Transactions,Stock
WHERE Trade.TransactionId = Transactions.Id AND Trade.StockId = Stock.StockSymbol
	AND Stock.Type = ? --Variable (CHAR)

-------------------------------------------------------------------------------------------
-- or customer
SELECT SUM(Transactions.Fee)
FROM Trade,Transactions,Account
WHERE Trade.TransactionId = Transactions.Id AND Trade.AccountId = Account.Id 
	AND Account.Client = ? --Variable (INTEGER)


-------------------------------------------------------------------------------------------
-- Determine which customer representative generated most total revenue
GO
CREATE VIEW EmployeeEarnings AS
SELECT SUM(Transactions.Fee) AS Total, Employee.SSN FROM Trade, Transactions, Employee
WHERE Trade.BrokerId = Employee.Id AND Trade.TransactionId = Transactions.Id
GROUP BY Employee.SSN
GO
SELECT Person.LastName, Person.FirstName
FROM EmployeeEarnings AS z, Person, Employee
WHERE Person.SSN = Employee.SSN AND Employee.SSN = z.SSN AND z.Total = (
	SELECT MAX(x.Total) FROM EmployeeEarnings AS x )
DROP VIEW EmployeeEarnings
-- If there is a tie, all values are produced
				
-------------------------------------------------------------------------------------------
-- Determine which customer generated most total revenue
GO
CREATE VIEW CustomerRevenue AS
SELECT SUM(Transactions.Fee) AS Total, Trade.AccountId FROM Trade, Transactions
WHERE Trade.TransactionId = Transactions.Id 
GROUP BY Trade.AccountId
GO
SELECT Person.LastName, Person.FirstName
FROM CustomerRevenue AS z, Person, Client, Account
WHERE Person.SSN = Client.Id AND Client.Id = Account.Client AND z.AccountId = Account.Id AND z.Total = (
	SELECT MAX(x.Total) FROM CustomerRevenue AS x )
DROP VIEW CustomerRevenue
-- If there is a tie, all values are produced

-------------------------------------------------------------------------------------------
-- Produce a list of most actively traded stocks
SELECT TOP 10 StockId, COUNT(StockId) AS NumOrders
FROM Trade, Orders
WHERE Trade.OrderId = Orders.Id AND Orders.DateTime > ? --Active Window (DATETIME)
GROUP BY StockId
ORDER BY NumOrders
DESC